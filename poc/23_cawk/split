#!/bin/sh
me="$0"
${AWK=awk} -v me="$me" '
BEGIN {
    FS = " *, *"
    if (ARGC < 2)
        err("not enough arguments")

    print "t x y z v v0 v1 f r0 r1"
    for (i = 1; i in ARGV; i++) {
        f = ARGV[i]
        one(f)
    }
}

function one(f,   r, i, cl, vf, cnt, V, t, sx, sy, sz, v0, v1, sr, r0, r1)
{
    t = f2time(f)
    if (empty(t))
        err("fail to extract time from \"%s\"", f)
    r = getline < f
    if (r != 1)
        err("fail to read \"%s\"", f)
    for (i = 1; i <= NF; i++)
        Key[$i] = i
    while (getline < f == 1) {
        xx = get("xx")
        yy = get("yy")
        zz = get("zz")
        x = get("x")
        y = get("y")
        z = get("z")
        vf = get("vf")
        cl = get("cl")
        sp = get("split")
        prev = get("prev")
        r = get("r")
        if (cl != 0 && vf < 0.1 && (sp == 2 || sp == 1)) {
            i = cnt[prev]++
            V[i, prev] = vf
            sr[i, prev] = r
            sx[prev] = x
            sy[prev] = y
            sz[prev] = z
        }
    }
    for (cl in cnt)
        if (cnt[cl] == 2) {
            v0 = V[0, cl]
            v1 = V[1, cl]
            r0 = sr[0, cl]
            r1 = sr[1, cl]
            if (v0 > v1) {
                tmp = v0 ; v0 = v1 ; v1 = tmp
                tmp = r0 ; r0 = r1 ; r1 = tmp
            }
            h = 1. / 96
            vh = h * h * h
            if (v0 > vh) {
                print t, sx[cl], sy[cl], sz[cl], v0 + v1, v0, v1, v0/v1, r0, r1
            }
        }
    close(f)
}

function msg(fmt, a, b, c, d, e)
{
    printf "%s: " fmt "\n", me, a, b, c, d, e | "cat >&2"
}

function err(fmt, a, b, c, d, e)
{
    msg(fmt, a, b, c, d, e)
    exit(2)
}

function get(key,   i)
{
    i = Key[key]
    return $i
}

function f2time(f,   time)
{
    time = f
    sub(/.*_/, "", time)
    sub(/\..*/, "", time)
    return time + 0
}

function empty(s)
{
    return length(s) == 0
}

' "$@"
