#!/usr/bin/env python3

import os

import aphros


class Test(aphros.TestBase):
    def __init__(self):
        cases = [
            "periodic", "slipwall", "surfsymm", "surfwall", "wall", "inlet",
            "inletflux"
        ]
        cases = cases + [c + "_proj" for c in cases]
        super().__init__(cases=cases)
        self.parser.add_argument('--block',
                                 '-b',
                                 type=int,
                                 default=16,
                                 choices=[8, 16],
                                 help="Block size.")

    def run(self, case):
        with open("add.conf", 'w') as f:
            f.write("include _{}.conf\n".format(case.partition('_')[0]))
            if "proj" in case:
                f.write("include _proj.conf\n")
        self.runcmd("make -f sim.makefile cleanrun")
        if "surf" in case  or "periodic" in case:
            r = ["s_0000.vtk"]
        else:
            r = ["p_0000.vts"]
        return r

    def check(self, outdir, refdir, output_files):
        for f in output_files:
            ref = os.path.join(refdir, f)
            out = os.path.join(outdir, f)
            if f.endswith(".vts"):
                self.runcmd("ap.diffnum '{}' '{}' 1e-3".format(ref, out))
            else:
                self.runcmd("ap.diffnum '{}' '{}' 2e-12".format(ref, out))
        return True

    def plot(self, datadir, output_files):
        f = os.path.join(datadir, "vf_0000.dat")
        u = aphros.ReadPlain(f)[0, :, :]

        fig, ax = aphros.plot.GetSquareFigure()
        aphros.plot.PlotSquareField(ax, u, vmin=0, vmax=1)

        fpath = os.path.join(datadir, "vf.svg")
        self.printlog(fpath)
        fig.savefig(fpath)


Test().main()
