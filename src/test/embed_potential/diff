#!/usr/bin/env python3

import os
import sys
import numpy as np

# Read uniform grid data
# p: path
# Format:
# <nx> <ny> <nz>
# <u[0,0,0]> <u[0,0,1]> ...
# Return:
# array of shape (nx, ny, nz)
# None if file not found
def ReadPlain(p):
  if not os.path.isfile(p):
    return None
  with open(p) as f:
    ll = f.readlines()
    # shape x,y,z
    s = np.array(ll[0].split(), dtype=int)
    # shape z,y,x
    ss = tuple(reversed(s))
    # data flat
    u = np.array(ll[1].split(), dtype=float)
    # data z,y,x
    u = u.reshape(ss)
    return u

av = sys.argv

pa = av[1]
pb = av[2]

ua = ReadPlain(pa)
ub = ReadPlain(pb)

sa = ua.shape
sb = ub.shape
sm = np.minimum(sa, sb)

assert all(sa % sm == 0)
assert all(sb % sm == 0)

ha = sa // sm
hb = sb // sm

da = np.mgrid[:ha[0],:ha[1],:ha[2]]
db = np.mgrid[:hb[0],:hb[1],:hb[2]]
da = np.reshape(da, (3,da[0].size))
db = np.reshape(db, (3,db[0].size))

im = np.mgrid[:sm[0],:sm[1],:sm[2]]
im = np.mgrid[:sm[0],:90,:90]

sa = np.reshape(sa, (3,1,1,1))
sb = np.reshape(sb, (3,1,1,1))
sm = np.reshape(sm, (3,1,1,1))

ia = im * sa // sm
ib = im * sb // sm
ia = ia[:,:,:,:,np.newaxis] + da[:,np.newaxis,np.newaxis,np.newaxis,:]
ib = ib[:,:,:,:,np.newaxis] + db[:,np.newaxis,np.newaxis,np.newaxis,:]

# resample
ra = np.mean(ua[ia[0],ia[1],ia[2]], axis=-1)
rb = np.mean(ub[ib[0],ib[1],ib[2]], axis=-1)

# center
#ra -= ra[0,0,0]
#rb -= rb[0,0,0]

d = abs(ra - rb)

l1 = d.mean()
l2 = (d ** 2).mean() ** 0.5
linf = d.max()

print("{:} {:} {:}".format(l1, l2, linf))
