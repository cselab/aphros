#!/usr/bin/env python3

import aphros
import os
import numpy as np
import itertools

# default
par = {
  "dim": 2,
  "nx": 512,
  "Lwide": 2,
  "Lnarrow": 0.35,
  "Hwide": 1,
  "Hnarrow": 75 / 1600.,
  "Re": 1000,
  "Ca": 0.07,
  "np": 4,
  "tl": 1440,
  "bs": 32,
        }

exec(open("par.py").read(), None, par)

Lwide = float(par["Lwide"])
Lnarrow = float(par["Lnarrow"])
H = float(par['Hwide'])
Hnarrow = float(par['Hnarrow'])
Re = par["Re"]
Ca = par["Ca"]
nx = par['nx']

extent = Lwide + Lnarrow + H * 0.5
inf = extent * 10.
lx = extent
hx = lx / nx
eps = hx * 0.01

ly = H + hx * 4
ly = max(ly, lx / np.floor(lx / ly))
lz = 0

assert extent >= H
assert np.isclose(lx / ly, np.round(lx / ly))

radius = 0.5

# geometry
geom = aphros.Geometry()
geom.Box([lx/2, ly/2, 0], [inf, H/2, inf], invert=1)
diag = (extent - Lwide) / (2. ** 0.5)
geom.Box([0, ly/2 - H/2, 0], [inf, diag, inf], -45)
geom.Box([0, ly/2 + H/2, 0], [inf, diag, inf], 45)
geom.Box([lx/2, ly/2, 0], [inf, Hnarrow/2, inf], invert=1, intersect=1)

with open("body.dat", 'w') as f:
    f.write(geom.Generate())

# boundary conditions
bc = aphros.Bc()

g = aphros.Geometry()
g.Box([0, 0, 0], [inf, inf, inf])
bc.Wall(g, velocity = [0, 0, 0])

g = aphros.Geometry()
g.Box([0, 0, 0], [eps, inf, inf])
bc.Inlet(g, velocity = [1, 0, 0])

g = aphros.Geometry()
g.Box([lx, 0, 0], [eps, inf, inf])
bc.Outlet(g)

with open("bc.dat", 'w') as f:
    f.write(bc.Generate())

# volume fraction
vf = aphros.Geometry()
with open("b.dat", 'w') as f:
    f.write(vf.Generate())

# configuration
var = aphros.Var()
for k in par:
    var[k] = par[k]

var['extent'] = float(extent)
rho = 1.
var['mu1'] = 1. / Re
var['mu2'] = var['mu1'] * rho
var['rho1'] = 1.
var['rho2'] = rho
var['sigma'] = 1. / Ca

ny = int(nx * ly / lx + 0.5)
nz = max(1, int(nx * lz / lx + 0.5))
bsx = par['bs']
bsy = bsx
bsz = bsx
np = par['np']
tl = par['tl']

if par['dim'] == 2:
    var['dumplist'] = "vx vy omz p"
    nz = 1
    bsz = 1

with open("par.make", 'w') as f:
        f.write(
'''m = {nx} {ny} {nz}
bs = {bsx} {bsy} {bsz}
np = {np}
tl = {tl}
'''.format(**locals()))

with open("par.conf", 'w') as f:
    f.write(var.Generate())
