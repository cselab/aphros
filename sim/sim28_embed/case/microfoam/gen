#!/usr/bin/env python

import aphros
import os
import numpy as np
import itertools
import sys

def Abort(msg):
    sys.stderr.write(str(msg) + '\n')
    exit(1)

def ExpPar():
    # SI units
    # Vecchiolla2018, Figure 2
    mu = 1.25e-3
    sigma = 35.2e-3
    volrate_lh = 12e-3 # litre/hour
    volrate = volrate_lh / 3600. / 1e3
    thickness = 60e-6
    height_narrow = 75e-6
    inlet_area = height_narrow * thickness
    inlet_vel = volrate / inlet_area
    Ca = mu * inlet_vel / sigma
    rho = 1260
    Re = height_narrow * inlet_vel * rho / mu
    print("Ca={:.5g}, Re={:.5g}, inlet_vel={:.5g}".format(Ca, Re, inlet_vel))
    # Ca=0.026305, Re=56, inlet_vel=0.74074


# default
par = {
  "dim": 2,
  "nx": 512,
  "Lwide": 2.,
  "Lnarrow": 0.35,
  "Hwide": 1.,
  "Hnarrow": 75. / 1600.,
  "thickness": 60. / 1600.,
  "Re": 50.,
  "Ca": 0.05,
  "rho": 0.01,
  "np": 4,
  "tl": 1440,
  "bs": 32,
  "bublength": 2,
        }

exec(open("par.py").read(), None, par)

Lwide = float(par["Lwide"])
Lnarrow = float(par["Lnarrow"])
H = float(par['Hwide'])
Hnarrow = float(par['Hnarrow'])
thickness = float(par['thickness'])
Re = par["Re"]
Ca = par["Ca"]
nx = par['nx']

extent = Lwide + Lnarrow + H * 0.5
inf = extent * 10.
lx = extent
hx = lx / nx
eps = hx * 0.01

bsx = par['bs']
bsy = bsx
bsz = bsx

ly = H + hx * 4
lz = thickness + hx * 4
assert ly <= extent
assert lz <= extent

if par['dim'] == 2:
    bsz = 1
    lz = 0

def Up(n, b):
    return max(1, n + b - 1) / b * b

ny = Up(int(nx * ly / lx + 0.5), bsy)
nz = Up(int(nx * lz / lx + 0.5), bsz)
ly = ny * hx
lz = nz * hx

# geometry
geom = aphros.Geometry()
geom.Box([lx/2, ly/2, 0], [inf, H/2, inf], invert=1)
diag = (extent - Lwide) / (2. ** 0.5)
geom.Box([0, ly/2 - H/2, 0], [inf, diag, inf], -45)
geom.Box([0, ly/2 + H/2, 0], [inf, diag, inf], 45)
geom.Box([lx/2, ly/2, 0], [inf, Hnarrow/2, inf], invert=1, intersect=1)
geom.Box([0,0,lz/2], [inf, inf, thickness/2], invert=1)


with open("body.dat", 'w') as f:
    f.write(geom.Generate())

# boundary conditions
bc = aphros.Bc()

g = aphros.Geometry()
g.Box([0, 0, 0], [inf, inf, inf])
bc.Wall(g, velocity = [0, 0, 0])

g = aphros.Geometry()
g.Box([0, 0, 0], [eps, inf, inf])
bc.Inlet(g, velocity = [1, 0, 0])

g = aphros.Geometry()
g.Box([lx, 0, 0], [eps, inf, inf])
bc.Outlet(g)

with open("bc.dat", 'w') as f:
    f.write(bc.Generate())

# volume fraction bubgen
vf = aphros.Geometry()
R = Hnarrow * par["bublength"]
vf.Box([R * 2, ly/2, lz/2], [R, Hnarrow/2, thickness/2])
with open("bg.dat", 'w') as f:
    f.write(vf.Generate())

# configuration
var = aphros.Var()
for k in par:
    var[k] = par[k]

var['extent'] = float(extent)
rho = float(var['rho'])
var['mu1'] = Hnarrow / Re
var['mu2'] = var['mu1'] * rho
var['rho1'] = 1.
var['rho2'] = rho
var['sigma'] = var['mu1'] / Ca

if par['dim'] == 2:
    var['dumplist'] = "vx vy omz p"
    var['hypre_periodic_z'] = 1

with open("par.conf", 'w') as f:
    f.write(var.Generate())

np = par['np']
nb = (nx / bsx) * (ny / bsy) * (nz / bsz)
if nb % np != 0:
    np0 = np
    for np in reversed(range(1, np + 1)):
        if nb % np == 0:
            break;
    print("Warning: number of blocks nb={:} not divisible by np={:}. \
Setting np={:}.".format(nb, np0, np))
    if np <= np0 * 0.75:
        Abort("Error: np reduced by more than 25%.")

tl = par['tl']

with open("par.make", 'w') as f:
        f.write(
'''m = {nx} {ny} {nz}
bs = {bsx} {bsy} {bsz}
np = {np}
tl = {tl}
'''.format(**locals()))
