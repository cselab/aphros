#!/usr/bin/env python

import numpy as np

def GetEmptyCluster():
  return np.array([]), np.array([]), np.array([]), np.array([])

def GetRandomCluster(xlim, ylim, zlim, r, gap__r=2., num_tries=1000):
  np.random.seed(0)

  gap = r * gap__r
  xx = []
  yy = []
  zz = []
  rr = []

  c = 0 # number of tries
  while True:
    x = np.clip(np.random.uniform(xlim[0] + r, xlim[1] - r), *xlim)
    y = np.clip(np.random.uniform(ylim[0] + r, ylim[1] - r), *ylim)
    z = np.clip(np.random.uniform(zlim[0] + r, zlim[1] - r), *zlim)
    dm = None  # minimal distance to other bubbles
    if len(xx):
      dm = ((
            (np.array(xx) - x) ** 2 +
            (np.array(yy) - y) ** 2 +
            (np.array(zz) - z) ** 2
            ) ** 0.5).min()

    global cyl_x, cyl_z, cyl_r
    cyldist = ((x - cyl_x) ** 2 + (z - cyl_z) ** 2) ** 0.5

    if (dm is None or dm >= 2 * r + gap) and (cyldist + r < cyl_r):
      xx.append(x)
      yy.append(y)
      zz.append(z)
      rr.append(r)
      c = 0
    else:
      c += 1
      if c > num_tries:
        break

  xx = np.array(xx)
  yy = np.array(yy)
  zz = np.array(zz)
  rr = np.array(rr)

  return np.array((xx, yy, zz, rr))


def GetVolumeSum(b):
  r = b[3]
  return np.sum(4. / 3. * np.pi * r ** 3)

# vd: domain volume
def GetVF(b, vd):
  return GetVolumeSum(b) / vd

r = 0.05   # bubble radius
gap = 0.5
cyl_x = 0.5
cyl_z = 0.5
cyl_r = 0.22

b = GetRandomCluster(
        [cyl_x - cyl_r, cyl_x + cyl_r], 
        [0.2, 1.8], 
        [cyl_x - cyl_r, cyl_x + cyl_r], 
        r, gap)

print("nb={:}".format(len(b[0])))
print("beta={:}".format(GetVF(b, 1)))

b =  np.array(b).T

fn = "brnd.dat"
np.savetxt(fn, b)
