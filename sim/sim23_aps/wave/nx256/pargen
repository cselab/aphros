#!/usr/bin/env python

# Reh: Reynolds number by channel height and average velocity
def Exp():
    # SI units

    sig = 73e-3 # surface tension
    g = 9.8
    # water
    rho = 1000 # density
    mu = 1e-3  # dynamic viscosity
    nu = mu / rho # kinematic viscosity

    # box width
    W = 0.27

    Ga = g * W**3 / nu**2
    Eo = rho * g * W**2 / sig


    for key in sorted(locals()):
        print("{:} \t=\t {:}".format(key, locals()[key]))
    print("\n")

    return locals()

def Sim(c):
    Ga,Eo = (c['Ga'], c['Eo'])

    # domain 
    W = 1. # width
    L = 1. # length
    assert L >= W

    g = 1
    # time
    tun = (W / g)**0.5  # unit
    tmax = tun * 30.
    dumpdt = tun * 0.05

    # liquid
    rho0 = 1. # density
    mu0 = (g * W**3 / Ga) ** 0.5  # viscosity
    sig = rho0 * g * W**2 / Eo

    # gas, ratio to liquid
    mu = 0.01
    rho = 0.01

    # mesh
    nx = 256
    ny = int(nx * L / W + 0.5)
    nz = nx

    # block size
    bs = 16
    # cores
    np = 4096
    # time limit (minutes)
    tl = 180

    for key in sorted(locals()):
        print("{:} \t=\t {:}".format(key, locals()[key]))
    print("\n")

    return locals()

def Gen(c):
    W = c['W']
    L = c['L']

    tmax = c['tmax']
    dumpdt = c['dumpdt']

    rho1 = c['rho0']
    mu1 = c['mu0']
    rho2 = rho1 * c['rho']
    mu2 = mu1 * c['mu']
    sig = c['sig']
    g = -c['g']

    with open("par.conf", 'w') as f:
        f.write('''\
# domain
set double extent {L}

# time
set double tmax {tmax}
set double dump_field_dt {dumpdt}
set double dump_part_dt {dumpdt}

# physical 
set double rho1 {rho1}
set double rho2 {rho2}
set double mu1 {mu1}
set double mu2 {mu2}
set double sigma {sig}
set vect gravity 0 {g} 0

set string init_vf solitoncos
set string vel_init solitoncos
set double soliton_xc 0.5
set double soliton_yc 0.5
set double soliton_xw 1.
set double soliton_yh 0.12

#set string init_vf wavelamb
#set string vel_init wavelamb
#set double wavelamb_a0 0.08
#set double wavelamb_xc 0.5
#set double wavelamb_h 0.5
#set double wavelamb_k 6.28

set string advection_solver vofm

        '''.format(**locals()))

    with open("par.make", 'w') as f:
        f.write(
'''m = {nx} {ny} {nz}
bs = {bs} {bs} {bs}
np = {np}
tl = {tl}
'''.format(**c))


c = Exp()
c = Sim(c)
Gen(c)
