#!/usr/bin/env python

import argparse

# Returns dict of {name:(value, description)}
def Default():
    we = (1., "Weber number")
    la = (1000. , "Laplace number")
    np = (1     , "number of processors")
    nx = (64    , "mesh size")
    brh = (4.   , "r/h, cells per bubble radius")
    bryk = (1.2 , "stretching factor for bubble size in y")
    bxr = ([4., 3., 2.] , "bubble displacement relative to radius")
    bcoh = ([0.2, 0.4, 0.6], "offset of bubble center relative to cell size")
    nfr = (100   , "number of frames")
    mu0 = (0.01     , "dynamic viscosity of carrier fluid")
    mu = (1.     , "dynamic viscosity of bubble relative to carrier")
    rho0 = (1.    , "density of carrier fluid")
    rho = (1.    , "density of bubble relative to carrier")
    dom = (1.    , "domain size")
    dim = (3    , "dimension, 2 or 3")
    chsm = (1    , "ch smooth steps (rhor>10: 1, rhor>100: 2)")
    gesm = (1    , "ge smooth steps")

    return locals().copy()

def IsClose(a, b):
    return abs(a - b) < 1e-10

# Returns Namespace with parameters from Default() overriden by args
def GetArgs():
    p = argparse.ArgumentParser(
            description='Generate conf.py and b.dat',  
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    c = Default()

    for k in c:
        v,h = c[k]
        if type(v) == list:
            m = ('X','Y','Z')
            p.add_argument('-' + k, nargs=len(v), metavar=m, 
                           default=v, help=h, type=type(v[0]))
        else:
            p.add_argument('-' + k, nargs='?',  
                           default=v, help=h, type=type(v))

    a = p.parse_args()
    return a

# Returns python code defining variables from dict c
# Returns python code defining config based on c.
# c: dict such that c.keys() includes Default().keys()
def GetDictPy(c):
    return '\n'.join(["{:} = {:}".format(k, c[k]) for k in c])

def norm(v):
    assert len(v) == 3
    return sum([a ** 2 for a in v]) ** 0.5

# Returns dictionary with config derived from c.
# a: Namespace, output of GetArgs()
def GetConf(a):
    d = dict(vars(a))

    we = a.we
    la = a.la
    nx = a.nx
    np = a.np
    brh = a.brh
    bxr = a.bxr
    mu = max(a.mu0, a.mu0 * a.mu)
    rho = max(a.rho0, a.rho0 * a.rho)
    dom = a.dom

    # mesh step
    hx = dom / nx
    # bubble radius
    brx = brh * hx
    bry = brx * a.bryk
    brz = brx
    br = [brx, bry, brz]
    # bubble diameter
    bd = brx * 2
    # surface tension
    sig = la * mu ** 2 / (rho * bd)
    # velocity magnitude
    vm = (we * sig / (bd * rho)) ** 0.5
    # total time
    tmax = norm(bxr) * brx / vm
    # velocity
    vel = [x * vm / norm(bxr) for x in bxr]
    # bubble center
    bc = [hx * (r / hx + 1 + o) for r,o in zip(br,a.bcoh)]

    assert IsClose(we, rho * norm(vel) ** 2 * bd / sig)
    assert IsClose(la, rho * sig * bd / mu ** 2)

    # dump interval
    dumpdt = tmax / a.nfr

    # derived variables to return
    kk = ['tmax', 'sig', 'vel', 'dumpdt', 'br', 'bc']
    for k in kk:
        d[k] = locals()[k]

    return d

# Returns text for b.dat
# c: center, shape 3
# r: size, shape 3
def GetBub(c, r):
    return "{:} {:} {:} {:} {:} {:}".format(*c, *r)

# Returns python code defining config derived from c.
# c: Namespace, output of GetArgs()
def GetConfPy(c):
    return GetDictPy(GetConf(c))

a = GetArgs()
c = GetConf(a)
cpy = GetDictPy(c)
open("conf.py", 'w').write(cpy + "\n")

b = GetBub(c['bc'], c['br'])
open("b.dat", 'w').write(b)

open("dim", 'w').write(str(c['dim']))
