#!/usr/bin/env python

# Belden 2012: Three-dimensional bubble field resolution ...

# Reh: Reynolds number by channel height and average velocity
def Exp():
    # SI units

    sig = 73e-3 # surface tension
    g = 9.8
    # water
    rho = 1000 # density
    mu = 1e-3  # dynamic viscosity
    nu = mu / rho # kinematic viscosity

    Ui = 0.5
    Di =  0.005

    ###
    Re = Ui * Di / nu
    Fr = (Ui ** 2 / (g * Di)) ** 0.5
    We = rho * Ui ** 2 * Di / sig

    for key in sorted(locals()):
        print("{:} \t=\t {:}".format(key, locals()[key]))
    print("\n")

    return locals()

def Sim(c):
    Re,We,Fr = (c['Re'], c['We'], c['Fr'])
    pi = 3.141592

    # domain 
    W = 1. # width
    L = 2. # length
    assert L >= W

    U = 1. # velocity
    
    # time
    tun = W / U  # unit
    tmax = tun * 5
    dumpdt = tun * 0.01

    # air gap
    airgap = L * 0.5

    # ring radius
    ringr0 = W * 0.1
    ringr1 = W * 0.2
    # ring thickness
    ringth = ringr1 - ringr0
    # ring depth
    ringdy = ringth * 1.5
    # ring vorticity
    ringom = U / ringth * 4.

    # center of ring
    ringx = W * 0.5
    ringz = W * 0.5
    ringy = L - airgap - ringdy

    # liquid
    rho0 = 1. # density
    # nu0 == mu0
    mu0 = U * ringth / Re  # viscosity

    sig = (rho0 * U ** 2 * ringth) / We
    g = U ** 2 / Fr ** 2 / ringth

    # gas, ratio to liquid
    mu = 0.01
    rho = 0.01

    # mesh
    #nx = 128
    nx = 64 # XXX
    ny = int(nx * L / W + 0.5)
    nz = nx

    # block size
    bs = 16
    # cores
    #np = 256
    np = 128 # XXX
    # time limit (minutes)
    tl = 1440

    for key in sorted(locals()):
        print("{:} \t=\t {:}".format(key, locals()[key]))
    print("\n")

    return locals()

def Gen(c):
    W = c['W']
    L = c['L']
    # bubble 
    bx = W * 0.5
    by = L 
    bz = W * 0.5
    brx = 1e10
    bry = c['airgap']
    brz = brx

    tmax = c['tmax']
    dumpdt = c['dumpdt']

    rho1 = c['rho0']
    mu1 = c['mu0']
    rho2 = rho1 * c['rho']
    mu2 = mu1 * c['mu']
    sig = c['sig']
    
    g = -c['g']

    ringx = c['ringx']
    ringy = c['ringy']
    ringz = c['ringz']
    ringom = c['ringom']
    ringr0 = c['ringr0']
    ringr1 = c['ringr1']

    with open("par.conf", 'w') as f:
        f.write('''\
# domain
set double extent {L}

# time
set double tmax {tmax}
set double dump_field_dt {dumpdt}

# physical 
set double rho1 {rho1}
set double rho2 {rho2}
set double mu1 {mu1}
set double mu2 {mu2}
set double sigma {sig}
set vect gravity 0 {g} 0

set int initvort 1
set string vel_init vortexring
set vect ring_c {ringx} {ringy} {ringz}
set vect ring_n 0. -1. 0. 
set double ring_om {ringom}
set double ring_r0 {ringr0}
set double ring_r1 {ringr1}

        '''.format(**locals()))

    with open("b.dat", 'w') as f:
        f.write("{bx} {by} {bz} {brx} {bry} {brz}\n".format(**locals()))

    with open("par.make", 'w') as f:
        f.write(
'''m = {nx} {ny} {nz}
bs = {bs} {bs} {bs}
np = {np}
tl = {tl}
'''.format(**c))



c = Exp()
c = Sim(c)
Gen(c)
