#!/usr/bin/env python

import sys

av = sys.argv

# multiplier for number of blocks in one direction
kb = int(av[1])
assert kb >= 1

# multiplier for number of cores in one direction
kp = int(av[2])
assert kp >= 1

# block size
bs = int(av[3])
assert bs in [8, 16, 32]

cubismnc = int(av[4])
backend = "cubismnc" if cubismnc else "cubism"

# message size for compression
compress = int(av[5])

# number of layers for advection
layers = int(av[6])

# blocks per core
bx = 2 * kb
by = 3 * kb
bz = 3 * kb

# cores
px = 3 * kp
py = 2 * kp
pz = 2 * kp

# 1 cubism vs cubismnc; mpi, no compression
# 2 openmp vs mpi; without compression, only cubismnc
# 3 compression vs no compression; only openmp, only cubismnc

nx = bs * bx * px
ny = bs * by * py
nz = bs * bz * pz

print("mesh: {:}x{:}x{:}".format(nx, ny, nz))

assert nx == ny and nx == nz

np = px * py * pz
tl = 10

with open("par.conf", 'w') as f:
    f.write('''\
set string backend {backend}
set int mpi_compress_msg {compress}
set int vofm_layers {layers}
'''.format(**locals()))

with open("par.make", 'w') as f:
    f.write(
'''m = {nx} {nx} {nx}
bs = {bs} {bs} {bs}
np = {np}
tl = {tl}
'''.format(**locals()))
