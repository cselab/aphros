#!/usr/bin/env python

import numpy as np

def GetEmptyCluster():
  return np.array([]), np.array([]), np.array([]), np.array([])

# generate rectangular cluster of bubbles
# of radius=r and gap=gap__r * r
# centered at (cx, cy, cz)
# with (nx, ny, nz) bubbles in each direction
def GetRegularCluster(cx, cy, cz, nx, ny, nz, r, gap__r=2.):
  gap = r * gap__r
  sh = 2 * r + gap
  a = np.mgrid[0:nx, 0:ny, 0:nz]
  a = a.reshape(3, np.prod(a.shape[1:]))
  xx = a[0] * sh
  yy = a[1] * sh
  zz = a[2] * sh
  xx += cx - xx.mean()
  yy += cy - yy.mean()
  zz += cz - zz.mean()
  rr = r * np.ones(len(xx))
  return xx, yy, zz, rr

def GetRandomCluster(xlim, ylim, zlim, r, gap__r=2., num_tries=1000):
  np.random.seed(0)

  gap = r * gap__r
  xx = []
  yy = []
  zz = []
  rr = []

  c = 0 # number of tries
  while True:
    x = np.clip(np.random.uniform(xlim[0] + r, xlim[1] - r), *xlim)
    y = np.clip(np.random.uniform(ylim[0] + r, ylim[1] - r), *ylim)
    z = np.clip(np.random.uniform(zlim[0] + r, zlim[1] - r), *zlim)
    dm = None  # minimal distance to other bubbles
    if len(xx):
      dm = ((
            (np.array(xx) - x) ** 2 +
            (np.array(yy) - y) ** 2 +
            (np.array(zz) - z) ** 2
            ) ** 0.5).min()
    if dm is None or dm >= 2 * r + gap:
      xx.append(x)
      yy.append(y)
      zz.append(z)
      rr.append(r)
      c = 0
    else:
      c += 1
      if c > num_tries:
        break

  xx = np.array(xx)
  yy = np.array(yy)
  zz = np.array(zz)
  rr = np.array(rr)

  return xx, yy, zz, rr


def GetVolumeSum(b):
  r = b[3]
  return np.sum(4. / 3. * np.pi * r ** 3)

# vd: domain volume
def GetVF(b, vd):
  return GetVolumeSum(b) / vd


# w: domain width (cube domain)
# r: bubble radius
# beta: volume fraction
# rnd: random if True, else regular
def GetCluster(w, r, beta, rnd):
  vd = w ** 3  # domain volume
  vb = 4. / 3. * np.pi * r ** 3 # single bubble volume
  nb = beta * vd / vb   # target number of bubbles

  print("w={:} r={:} beta={:} rnd={:}".format(w, r, beta, rnd))

  b = None # cluster
  if rnd:
    xlim = [0., w]
    ylim = [0., w]
    zlim = [0., w]
    if nb == 0:
      b = GetEmptyCluster()
    else:
      vdb = vd / nb # domain volume per bubble
      gap = max(0., vdb ** (1. / 3.) - 2 * r)
      gap *= 0.65 # empirical correction
      gap__r = gap / r
      b = GetRandomCluster(xlim, ylim, zlim, r, gap__r)
  else: # regular
    n1 = int(nb ** (1. / 3.) + 0.5)  # number of bubbles in one direction
    gap = w / n1 - 2. * r   
    gap__r = gap / r
    cx,cy,cz = (w * 0.5, w * 0.5, w * 0.5)
    nx,ny,nz = (n1, n1, n1)
    b = GetRegularCluster(cx, cy, cz, nx, ny, nz, r, gap__r=gap__r)
    print("nx={:},ny={:},nz={:}".format(nx, ny, nz))

  print("nb={:}".format(len(b[0])))
  print("beta={:}".format(GetVF(b, vd)))
  return b


w = 2. * np.pi  # domain width
r = w / 16.   # bubble radius
beta = 0.05 # volume fraction
#beta = 0. 
rnd = True # random cluster

b = GetCluster(w, r, beta, rnd)

fn = "b.dat"
np.savetxt(fn, np.vstack(b).T)
