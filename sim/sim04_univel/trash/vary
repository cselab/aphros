#!/usr/bin/env python

import os
import itertools as it
import numpy as np
from glob import glob

import ch

force=False

def sh(s, fatal=True):
    print(s)
    r = os.system(s)
    assert not fatal or r == 0

o = "out"

ff = []
ddim = [2,3]
for dim,cpr in it.product(ddim, 2 ** np.arange(0,3,1)):
    #if abs(13.45 - cpr) > 1: # XXX
    #    continue
    nxm = 16 if dim == 2 else 8
    tmax = 3.
    We = 0.01
    nx = max(nxm, Upper2(2 * cpr * (1. + tmax)))
    fo="plot_dim{:}_cpr{:06.02f}".format(dim, cpr)
    ff.append(fo)

    if not os.path.isdir(fo) or force:
        sh("./gen -nx {nx} -cpr {cpr} -bryk 1. -we {We} \
            -dim {dim} -tmax {tmax}".format(**locals()))
        sh("./run &>> {:}".format(o))
        sh("rm -rf {:}".format(fo))
        sh("mv plot {:}".format(fo))

import ch.plot as chp

ll = ['traj.pdf', 'trajp.pdf', 'trajvxm.pdf', 'trajvx2.pdf']
ny = len(ll)

for dim in ddim:
    fd = [f for f in ff if "dim{:}".format(dim) in f]
    nx = len(fd) 
    ww = []
    o='merge_dim{:}.pdf'.format(dim)
    if not os.path.isfile(o) or force:
        for l in ll:
            ww += [os.path.join(f,'traj/pdf',l) for f in fd]
        sh("pdfjam --nup {nx}x{ny} --outfile {o} -- {:}".format(
            ' '.join(ww), nx=nx, ny=ny, o=o))
        sh("pdfcrop --margins '5 5 5 5' {o} {o}".format(o=o))

    continue
    # gather error
    ee = {}
    for f in fd:
        fe = os.path.join(f, "dat/hist_norm.dat") # max l1 l2
        for l in open(fe):
            n,rx,ry,em,e1,e2 = l.split() # n: solver name
            if not n in ee:
                ee[n] = dict()
            def A(k, v):
                if not k in ee[n]:
                    ee[n][k] = []
                ee[n][k].append(float(v))
            A('rx', rx)
            A('ry', ry)
            A('max', em)
            A('l1', e1)
            A('l2', e2)

    # write error
    cc = ['rx', 'ry', 'max', 'l1', 'l2']
    for n in ee:
        e = ee[n]
        an = {'gerris':'ge', 'mfer':'ch'} # alias
        o = "er_d{:}_{:}.dat".format(dim, an[n])
        if os.path.isfile(o) and not force:
            continue
        print(o)

        with open(o, 'w') as fo:
            fo.write(' '.join(cc) + '\n')
            for i in range(len(e[cc[0]])):
                fo.write(' '.join([str(e[c][i]) for c in cc]) + '\n')

    # plot error
    for m in ['max', 'l1', 'l2']:
        o = "er_d{:}_{:}.pdf".format(dim, m)
        if os.path.isfile(o) and not force:
            continue
        print(o)
        fig, ax = chp.PlotInit()
        r = np.array(e['rx'])
        for n in ee:
            e = ee[n]
            ax.plot(r, e[m], label=n, marker='.')
        ax.plot(r, 1 / r, label='first', ls='--')
        ax.plot(r, 1 / r ** 2, label='second', ls='-.')

        ax.legend()
        ax.grid(True)
        ax.set_xlabel('r/h')
        ax.set_ylabel('curvature error: ' + m)
        ax.set_ylim(1e-4, 10)
        ax.set_xscale('log')
        ax.set_yscale('log')
        xt = 2 ** np.arange(0, 5)
        ax.set_xticks(xt)
        ax.set_xticklabels(xt)
        chp.PlotSave(fig, ax, o)


