#!/usr/bin/env python

c = {}
exec(open("../par.py").read(), None, c)

o="par.conf"

c['vels'] = "{:} {:} {:}".format(*(c['vel']))

c['loc'] = 1 if c["np"] == 1 else 0

c['mu2'] = c['mu0'] * c['mu']
c['rho2'] = c['rho0'] * c['rho']

t = '''set double tmax {tmax}
set double dump_field_dt {dumpdt}
set double dump_part_dt {dumpdt}
set double sigma {sig}
set double mu1 {mu0}
set double mu2 {mu2}
set double rho1 {rho0}
set double rho2 {rho2}
set int vfsmooth {chsm}
set vect vel {vels}
set int loc {loc}
set int dim {dim}
set vect gravity {g[0]} {g[1]} {g[2]}
'''.format(**c)

dim = c['dim']
d3 = (dim == 3)

if c['pois']:
    if c['wally'] and c['wallz']: # square duct
        t += '''
set string vel_init poisyz
set double poismu {mu0}
set double poisgrad {pgrad}
set vect force {pgrad} 0 0 
set int poisiter 3
'''.format(**c)
    elif c['wally']:  # plates
        t += '''
set string vel_init poisy
set double poisvel {poisvel}
set vect force {pgrad} 0 0 
'''.format(**c)
    else:
        assert False, "pois=1 requires wally or wallz"

if c['meshvel']:
    t += '''
set string meshvel_auto v
set double meshvel_weight 0.5
set vect meshvel_mask 1 0 0
'''

for d in ['x', 'y', 'z'][0:dim]:
    if c['wall' + d]:
        t += ''' 
set int hypre_periodic_{d} 0
set string bc_{d}m wall 0 0 0
set string bc_{d}p wall 0 0 0
'''.format(d=d)

if c['symm']:
# TODO: consider periodic in y,z
    t += '''
set string bc_yp slipwall 
set string bc_zp slipwall 
set int poiswyp 0
set int poiswzp 0
'''

if c['symmcorn']:
    t += '''
set int bcc_reflect 1 
set string bc_xm slipwall 
set string bc_xp slipwall 
set int hypre_periodic_x 0
set string bc_ym slipwall 
set string bc_yp slipwall 
set int hypre_periodic_y 0
'''
    if d3:
        t += '''
set string bc_zm slipwall 
set string bc_zp slipwall 
set int hypre_periodic_z 0
'''

if c['dumpdefault']:
    t += '''
set string dumpformat default
'''

open(o, 'w').write(t)

