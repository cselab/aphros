#!/usr/bin/env python

import glob

c = {}
exec(open("../par.py").read(), None, c)

dim = c['dim']
d2 = (dim == 2)
d3 = (dim == 3)

# number of frames from ch
g = "../ch/vf_*.dat"
nfr = len(glob.glob(g))
assert nfr >= 2, "Error: Need at least 2 frames $r, found %r" % (g, nfr)

c['nfr'] = nfr
c['dumpdt'] = c['tmax'] / c['nfr']

nx = c['nx']
nxexp = nx.bit_length() - 1
assert nx == 2 ** nxexp, "Mesh size nx=%r but must be power of 2" % nx
c['nxexp'] = nxexp

c['rho2'] = c['rho0'] * c['rho']
c['mu2'] = c['mu0'] * c['mu']

o = '''Define VELX {vel[0]}
Define VELY {vel[1]}
Define VELZ {vel[2]}
Define TMAX {tmax}
Define DUMPDT {dumpdt}
Define SIGMA {sig}
Define RHO1 {rho0}
Define RHO2 {rho2}
Define MU1 {mu0}
Define MU2 {mu2}
Define GESM {gesm}
Define REFINE {nxexp}
Define PGRAD {pgrad}
Define POISVEL {poisvel}

'''.format(**c)

# base config file
mb = "main.gfs"
print("Reading base config from {:}".format(mb))
bt = open(mb).read()

# dimension
bt = bt.replace('[D2]', '' if d2 else '#')
bt = bt.replace('[D3]', '' if d3 else '#')

# Poiseuille flow
bt = bt.replace('[POIS]', '' if c['pois'] else '#')
bt = bt.replace('[!POIS]', '' if not c['pois'] else '#')

drz = "BcDirichlet W (0)" if d3 else ""
wl = '''{{:}} = Boundary {{{{
  BcDirichlet U (0) 
  BcDirichlet V (0) 
  {drz} 
  }}}}
{{:}} = Boundary {{{{
  BcDirichlet U (0) 
  BcDirichlet V (0) 
  {drz} 
  }}}}'''.format(drz=drz)

b0 = {'X':'left', 'Y':'bottom', 'Z':'back'}
b1 = {'X':'right', 'Y':'top', 'Z':'front'}

numedge = 0

dd = ['X', 'Y', 'Z'] if d3 else ['X', 'Y']

# wall conditions
for d in dd:
    if c['wall{:}'.format(d.lower())]:
        bt = bt.replace('[BC{:}]'.format(d), wl.format(b0[d], b1[d]))
    else:
        numedge += 1
        bt = bt.replace('[EDGE{:}]'.format(d), "1 1 {:}".format(b1[d]))

bt = bt.replace('[NUMEDGE]'.format(d), str(numedge))

# cleanup
for d in ['X', 'Y', 'Z']:
    bt = bt.replace('[BC{:}]'.format(d), '')
    bt = bt.replace('[EDGE{:}]'.format(d), '')

o += bt

open("main.gen.gfs", 'w').write(o)
