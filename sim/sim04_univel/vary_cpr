#!/usr/bin/env python

import os
import itertools as it
import numpy
import sys
from glob import glob

import aphros

sh = aphros.sh

a = aphros.GetStdPar('out', 'We', 'La', 'tmax', 'dim', 'dumpdefault', 
        'nfr', 'np', 'nx', 'chsm', 'pos', 'dom')
a['La'][0] = 1200.
a['We'][0] = 0.01
a['tmax'][0] = 1.
a['cpr0'] = [-1., "cpr range left"]
a['cpr1'] = [5.1, "cpr range right"]
a['cprs'] = [0.25, "cpr range step"]
a['dim'][0] = 2
a['np'][0] = 1
a['nfr'][0] = 5
a['nx'][0] = 128
a['dummy'] = ["", "dummy directory"]
a['aphros'] = [1, "enable ch"]
a['bap'] = [1, "enable bap"]
a['bal'] = [1, "enable bal"]
a['ba'] = [1, "enable ba"]
a['vis'] = [1, "enable vis"]
a['extra'] = ["", "extra arguments to ./gen"]
c = aphros.GetArgs(a)
assert c.out is not None
o = os.path.realpath(c.out)
sh("mkdir -p '{:}'".format(o))

r0,r1,rs = (c.cpr0, c.cpr1, c.cprs)

args = sys.argv[0]
args += ' ' + ' '.join(sys.argv[1:])

dummy = c.dummy if c.dummy else __file__

for dim,cpr in it.product([c.dim], 1. * 2 ** numpy.arange(r0,r1,rs)):
    nxm = aphros.GetBs(dim)
    La = c.La
    We = c.We
    tmax = c.tmax
    #nx = max(nxm, aphros.Upper2(2 * cpr * (1. + tmax)))
    nx = c.nx
    np = c.np
    nfr = c.nfr
    dumpdefault = c.dumpdefault
    chsm = c.chsm
    pos = c.pos
    dom = c.dom
    extra = c.extra

    chrun = "" if c.ch else "echo > r_ch"
    barun = "" if c.ba else "echo > r_ba"
    baprun = "" if c.bap else "echo > r_bap"
    balrun = "" if c.bal else "echo > r_bal"
    visrun = "" if c.vis else "echo > r_vis"

    sf = "dim{:}_cpr{:06.02f}_we{:06.03f}_la{:06.01f}".format(dim, cpr, We, La)
    ot = os.path.join(o, "run_{:}".format(sf))
    od = os.path.join(o, "dat_{:}".format(sf))

    cf = '''

# generated by:
# {args}

rm -f ch/done ge/done ba/done

{chrun}
{barun}
{baprun}
{balrun}
{visrun}

./gen -nx {nx} -cpr {cpr} -We {We} -La {La} -np {np} -nfr {nfr}  \
-dim {dim} -tmax {tmax} -mode vel -chsm {chsm} -pos {pos} -dom {dom} {extra}

echo "set int statvel 1
set int list_ls 2
set string dumplist vf
set int min_iter 3
" > ch/add.conf
'''.format(**locals())

    sh("ap.task {:} {:} > {:} << 'EOF'\n {:}\nEOF".format(dummy, od, ot, cf))
    sh("chmod +x {:}".format(ot))
