#!/usr/bin/env python

import glob
import os

c = {}
exec(open("../par.py").read(), None, c)

dim = c['dim']
d2 = (dim == 2)
d3 = (dim == 3)

# number of frames from ch
nfr = c['nfr']
#if os.path.isfile("../ch/done"):
#  g = "../ch/s_*.vtk"
#  nfr = len(glob.glob(g))
#  print("Found {:} frames as {:}".format(nfr, g))
#  assert nfr >= 2, "Error: Need at least 2 frames $r, found %r" % (g, nfr)

c['nfr'] = nfr
c['dumpdt'] = c['tmax'] / c['nfr']
c['stdt'] = c['tmax'] / c['nfr'] / 10.

nx = c['nx']
nxexp = nx.bit_length() - 1
assert nx == 2 ** nxexp, "Mesh size nx=%r but must be power of 2" % nx
c['nxexp'] = nxexp

c['rho2'] = c['rho0'] * c['rho']
c['mu2'] = c['mu0'] * c['mu']

c['gx'] = c['g'][0]
c['gy'] = c['g'][1]
c['gz'] = c['g'][2]

c['part_circ'] = ("1" if c['part_circ'] == 1. else "0")


o = '''
#define DIM {dim}
#define VELX {vel[0]}
#define VELY ({vel[1]})
#define VELZ ({vel[2]})
#define TMAX ({tmax})
#define DUMPDT ({dumpdt})
#define STDT ({stdt})
#define SIGMA ({sig})
#define RHO1 ({rho0})
#define RHO2 ({rho2})
#define MU1 ({mu0})
#define MU2 ({mu2})
#define GESM ({gesm})
#define REFINE ({nxexp})
#define PGRAD ({pgrad})
#define POISVEL ({poisvel})
#define GX ({gx})
#define GY ({gy})
#define GZ ({gz})

#define PS_Np ({part_np})
#define PS_Ns ({part_ns})
#define PS_Hp ({part_hp})
#define PS_eps ({part_eps})
#define PS_itermax ({part_itermax})
#define PS_eta ({part_eta})
#define PS_circ ({part_circ})
'''.format(**c)


# boudnary conditions

wallx = ""
wally = ""
wallz = ""

perx = "periodic(right);"
pery = "periodic(top);"
perz = "periodic(front);"

contang = 165.

if c['wallx']:
  wallx = 'u.t[left] = dirichlet(0);  \
u.t[right] = dirichlet(0); \
f[left] = dirichlet(0); \
f[right] = dirichlet(0); \
  '.format(contang)
  perx = ""

if c['wally']:
  wally = 'u.t[bottom] = dirichlet(0); \
u.t[top] = dirichlet(0); \
f[bottom] = dirichlet(0); \
f[top] = dirichlet(0); \
  '.format(contang)
  pery = ""

if dim == 3 and c['wallz']:
  wallz = 'u.t[back] = dirichlet(0); \
u.t[front] = dirichlet(0); \
f[back] = dirichlet(0); \
f[front] = dirichlet(0); \
  '.format(contang)
  perz = ""

if c['symmcorn']:
  perx = ""
  pery = ""
  perz = ""

o += '''
#define WALLX {wallx}
#define WALLY {wally}
#define WALLZ {wallz}

#define PERX {perx}
#define PERY {pery}
#define PERZ {perz}
'''.format(**locals())

open("par.h", 'w').write(o)
