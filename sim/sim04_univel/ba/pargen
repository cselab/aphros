#!/usr/bin/env python

import glob
import os

c = {}
exec(open("../par.py").read(), None, c)

dim = c['dim']
d2 = (dim == 2)
d3 = (dim == 3)

# number of frames from ch
nfr = c['nfr']
if os.path.isfile("../ch/done"):
  g = "../ch/s_*.vtk"
  nfr = len(glob.glob(g))
  print("Found {:} frames as {:}".format(nfr, g))
  assert nfr >= 2, "Error: Need at least 2 frames $r, found %r" % (g, nfr)

c['nfr'] = nfr
c['dumpdt'] = c['tmax'] / c['nfr']
c['stdt'] = c['tmax'] / c['nfr'] / 10.

nx = c['nx']
nxexp = nx.bit_length() - 1
assert nx == 2 ** nxexp, "Mesh size nx=%r but must be power of 2" % nx
c['nxexp'] = nxexp

c['rho2'] = c['rho0'] * c['rho']
c['mu2'] = c['mu0'] * c['mu']

c['gx'] = c['g'][0]
c['gy'] = c['g'][1]
c['gz'] = c['g'][2]

ob = ""
with open("../b.dat", 'r') as f:
  ll = f.readlines()
  if len(ll) > 0:
    l = ll[0]
    l = list(map(float, l.split()))
    ob += '''
#define BCX ({:})
#define BCY ({:})
#define BCZ ({:})
#define BR ({:})
    '''.format(*l);
  if len(ll) > 1:
    l = ll[1]
    l = list(map(float, l.split()))
    ob += '''
#define BC2X ({:})
#define BC2Y ({:})
#define BC2Z ({:})
#define BR2 ({:})

    '''.format(*l);

o = '''
#define DIM {dim}
#define VELX {vel[0]}
#define VELY ({vel[1]})
#define VELZ ({vel[2]})
#define TMAX ({tmax})
#define DUMPDT ({dumpdt})
#define STDT ({stdt})
#define SIGMA ({sig})
#define RHO1 ({rho0})
#define RHO2 ({rho2})
#define MU1 ({mu0})
#define MU2 ({mu2})
#define GESM ({gesm})
#define REFINE ({nxexp})
#define PGRAD ({pgrad})
#define POISVEL ({poisvel})
#define GX ({gx})
#define GY ({gy})
#define GZ ({gz})

'''.format(**c)

o += ob

open("par.h", 'w').write(o)
