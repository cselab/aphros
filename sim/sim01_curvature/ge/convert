#!/usr/bin/env python

import vtk
import numpy as np
import glob 
import os


# Write uniform grid data
# u -- 2d or 3d array
# p -- path
# Format:
# <Nx> <Ny> <Nz>
# <u[0,0,0]> <u[1,0,0]> ...
def Write(u, p):
    s = u.shape
    assert len(s) in [2, 3]
    # reshape 2d to 3d
    if (len(s) == 2):
        u = u.reshape((s[0], s[1], 1))

    with open(p, 'w') as f:
        f.write("{:} {:} {:}\n".format(*u.shape))
        u = u.flatten()
        np.savetxt(f, u, newline='', fmt='%.16g ')


# Dictionary of names of fields with corresponding aliases
# key: name of field in vtk (e.g. T)
# value: prefix of output (e.g. vf)
def GetFields():
    return {'T':'vf', 'U':'vx', 'V':'vy', 'W':'vz', 'P':'p', 'K':'k'}

# Path to dat from vtk
# p: path to vtk
# k: field name
def GetDatPath(p, k):
    d = os.path.dirname(p)
    f = os.path.basename(p)
    fn,fe = os.path.splitext(f)
    s = fn[1:]  # suffix of filename without extension
    return "{:}{:}.dat".format(k, s)

# Converts vtk to plain format with native python implementation
# p: path to vtk,.
# ff: output of GetFields()
def ConvertNative(p, ff):
    d = vtk.read_vtk(p)
    dim = int(open('../dim').read())
    if dim == 2:
        x,y,uu = vtk.interp_to_uniform(d['x'], d['y'], [d[k] for k in ff])
    else:
        x,y,z,uu = vtk.interp_to_uniform3(d['x'], d['y'], d['z'], [d[k] for k in ff])

    for i,k in enumerate(ff):
        Write(uu[i], GetDatPath(p, ff[k]))

# Converts vtk to plain format with external tool mfer.vtk2dat
# p: path to vtk,.
# ff: output of GetFields()
def ConvertExt(p, ff):
    for k in ff:
        c = "mfer.vtk2dat {:} {:} {:}".format(p, k, GetDatPath(p, ff[k]))
        os.system(c)

pp = sorted(glob.glob("u_*.vtk"))
ff = {'T':'u', 'K':'k'}

for p in pp:
    ConvertNative(p, ff)

