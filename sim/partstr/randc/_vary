#!/usr/bin/env python

# Vary bubble position and radius.
# $1: solver name (ch, ba)
import numpy as np
import os
import sys

def sh(s, fatal=True, silent=True):
    if not silent:
        print(s)
    r = os.system(s)
    assert not fatal or r == 0

# ri: radius index
# Returns:
# r: radius
# nxexp: exponent of mesh size, nx=2**nxexp
# cpr: r*nx
def GetR(ri):
    cpr = 2. ** (ri * 0.25 - 1)
    nxexp = max(4, int((2. + cpr) * 2. + 0.5).bit_length())
    nx = 2. ** nxexp
    r = cpr / nx
    return r, nxexp, cpr

# ri: index if radius
# bi: index of bubble center
# s: solver prefix (ch, ba)
# force: overwrite existing
def Run(ri, bi, s, force=False):
    global bb
    global dim
    log = "log"
    r, nxexp, cpr = GetR(ri)
    nx = 2 ** nxexp
    hx = 1. / nx
    bc = bb[bi] # uniform [0,1]
    bc = 0.5 + bc * hx * 0.5 # cell octant, [0.5, 0.5 + hx*0.5]
    ok = "{:}/kr{:03d}b{:03d}.dat".format(s, ri, bi)
    ovf = "{:}/vfr{:03d}b{:03d}.dat".format(s, ri, bi)
    if os.path.isfile(ok) and os.path.isfile(ovf) and not force:
        print("Skip existing {:}".format(ok))
        return
    if dim == 2:
        bc[2] = hx * 0.5
    with open("{:}/b.dat".format(s), 'w') as f :
        f.write("{:} {:} {:} {:}".format(bc[0], bc[1], bc[2], r))
    with open("{:}/dim".format(s), 'w') as f :
        f.write("{:}".format(dim))
    with open("{:}/nxexp".format(s), 'w') as f :
        f.write("{:}".format(nxexp))
    print("ri={:}, bi={:}".format(ri, bi))
    sh("(cd {s} ; ./run) &>> {log} && mv {s}/ok {ok} && mv {s}/ovf {ovf}"
            .format(**locals()))


def Vary(ss, nri):
    global bb
    global dim
    print("solvers: {:}".format(ss))
    for s in ss:
        print('s={:}'.format(s))
        for ri in range(nri):
            for bi in range(len(bb)):
                Run(ri, bi, s)



bb = np.loadtxt('bb')[:2]

av = sys.argv
dim = int(av[1])
assert dim in [2, 3]
s = av[2] if len(av) > 2 else 'all'

ssa = ['ba', 'ch', 'ge']

assert s in ssa + ['all']

ss = ssa if s == 'all' else [s]

nri = 30

if len(av) > 4:
    assert s in ssa
    ri = int(av[3])
    bi = int(av[4])
    Run(ri, bi, s, True)
else:
    Vary(ss, nri)
