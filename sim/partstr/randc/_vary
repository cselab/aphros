#!/usr/bin/env python

# Vary bubble position and radius.
# $1: solver name (ch, ba)

import numpy as np
import os
import sys

def sh(s, fatal=True, silent=True):
    if not silent:
        print(s)
    r = os.system(s)
    assert not fatal or r == 0

bb = np.loadtxt('bb')[:10]

nx = 32
hx = 1. / nx

av = sys.argv
s = av[1] if len(av) > 1 else 'all'

ssa = ['ba', 'ch', 'ge']

assert s in ssa + ['all']

ss = ssa if s == 'all' else [s]

sh("mkdir -p {}".format(s))


# radius exponent
rre = np.linspace(-1, 4, 19, endpoint=False)

# ri: index if radius
# bi: index of bubble center
# s: solver prefix (ch, ba)
# force: overwrite existing
def Run(ri, bi, s, force=False):
    log = "log"
    re = rre[ri]
    bc = bb[bi]
    r = hx * 2. ** re
    ok = "{:}/kr{:03d}b{:03d}.dat".format(s, ri, bi)
    ovf = "{:}/vfr{:03d}b{:03d}.dat".format(s, ri, bi)
    if os.path.isfile(ok) and os.path.isfile(ovf) and not force:
        print("Skip existing {:}".format(ok))
        return
    with open("b.dat", 'w') as f :
        f.write("{:} {:} {:} {:}".format(bc[0], bc[1], bc[2], r))
    print("ri={:}, bi={:}".format(ri, bi))
    sh("(cd {s} ; ./run) &>> {log}; mv {s}/ok {ok} ; mv {s}/ovf {ovf}"
            .format(**locals()))


def Vary():
    print("solvers: {:}".format(ss))
    for s in ss:
        for ri in range(len(rre)):
            for bi in range(len(bb)):
                Run(ri, bi, s)

Vary()

