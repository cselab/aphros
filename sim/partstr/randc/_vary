#!/usr/bin/env python

# Vary bubble position and radius.
# $1: solver name (ch, ba)
import numpy as np
import os
import sys
import argparse
from getr import *

def parse():
    p = argparse.ArgumentParser()

    p.add_argument('--dim', type=int, default=2, 
            help='dimension (2, 3)')
    p.add_argument('--bi', type=int, default=-1, 
            help='index of position')
    p.add_argument('--ri', type=int, default=-1, 
            help='index of radius')
    p.add_argument('--nbi', type=int, default=10, 
            help='choices of position')
    p.add_argument('--nri', type=int, default=10, 
            help='choices of radius')
    p.add_argument('--overlap', type=int, default=0, 
            help='exact volume fraction with overlap (0, 1)')
    p.add_argument('--solver', type=str, default='all', 
            help='solver (ch, ba, ge)')
    p.add_argument('--plot', action='store_true', 
            help='plot with bubble RI BI, requires DIM=2')

    return p.parse_known_args()


def sh(s, fatal=True, silent=True):
    if not silent:
        print(s)
    r = os.system(s)
    assert not fatal or r == 0

# ri: index if radius
# bi: index of bubble center
# s: solver prefix (ch, ba)
# force: overwrite existing
def Run(ri, bi, s, force=False):
    global bb
    global dim
    log = "log"
    r, nxexp, cpr = GetR(ri)
    nx = 2 ** nxexp
    hx = 1. / nx
    bc = bb[bi] # uniform [0,1]
    bc = 0.5 + bc * hx * 0.5 # cell octant, [0.5, 0.5 + hx*0.5]
    ok = "{:}/kr{:03d}b{:03d}.dat".format(s, ri, bi)
    ovf = "{:}/vfr{:03d}b{:03d}.dat".format(s, ri, bi)
    if os.path.isfile(ok) and os.path.isfile(ovf) and not force:
        print("Skip existing {:}".format(ok))
        return
    if dim == 2:
        bc[2] = hx * 0.5
    with open("{:}/b.dat".format(s), 'w') as f :
        f.write("{:} {:} {:} {:}".format(bc[0], bc[1], bc[2], r))
    with open("{:}/dim".format(s), 'w') as f :
        f.write("{:}".format(dim))
    with open("{:}/nxexp".format(s), 'w') as f :
        f.write("{:}".format(nxexp))
    print("ri={:}, bi={:}, cpr={:.4g}, nx={:}, s={:}".format(ri, bi, cpr, nx, s))
    sh("(cd {s} ; ./run) &>> {log} && mv {s}/ok {ok} && mv {s}/ovf {ovf}"
            .format(**locals()))


def Vary(ss, nri):
    global bb
    global dim
    print("solvers: {:}".format(ss))
    for ri in range(nri):
        for bi in range(len(bb)):
            for s in ss:
                Run(ri, bi, s)


# arguments
args, unk = parse()

print(args)

# choices for position
nbi = args.nbi

bb = np.loadtxt('bb')[:nbi]

dim = args.dim
assert dim in [2, 3]

overlap = args.overlap

if args.plot:
    s = 'ch'
    ri = args.ri
    bi = args.bi
    assert ri != -1
    assert bi != -1
    assert dim == 2
    Run(ri, bi, s, True)
    o = "vfr{:03d}b{:03d}.pdf".format(ri, bi)
    sh("(cd {s} ; ./plot ; mv vf_0000.pdf ../{o})".format(**locals()))
    exit(0)

s = args.solver

with open("ch/overlap.conf", 'w') as f:
    if overlap:
        f.write("set int list_ls 2")
    else:
        f.write("")

ssa = ['ch', 'ba', 'ge']

assert s in ssa + ['all']

ss = ssa if s == 'all' else [s]

if args.solver != "all":
    assert s in ssa
    ri = args.ri
    bi = args.bi
    Run(ri, bi, s, True)
else:
    Vary(ss, args.nri)



