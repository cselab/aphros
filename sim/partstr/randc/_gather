#!/usr/bin/env python

import numpy as np
import glob
import re
from getr import *


bb = np.loadtxt('bb')

ff = sorted(glob.glob("kr*b*.dat"))

if not len(ff):
    exit()

ee = []

dim = int(open("dim").read())

for f in ff:
    m = re.findall("kr([0-9]*)b([0-9]*)", f)[0]
    ri = int(m[0])
    bi = int(m[1])
    r, nxexp, cpr = GetR(ri)
    nx = 2 ** nxexp
    b = bb[bi]
    # volume
    fvf = "vfr{:}b{:}.dat".format(m[0], m[1]) # vf filename
    vf = float(open(fvf).read())
    # radius from volume 
    rvf = (vf / np.pi * nx) ** 0.5  if dim == 2 else (vf * 3. / (4. * np.pi)) ** (1. / 3.)
    # exact curv
    kex = 1. / rvf if rvf != 0. else 0.
    # particles
    k = np.loadtxt(f)
    # curvature error
    if not k.size:
        ekm = 1.
        ek1 = 1.
        ek2 = 1.
        eks = 1.
    else:
        ekm = abs(k - kex).max() / kex
        ek1 = abs(k - kex).mean() / kex
        ek2 = ((k - kex) ** 2).mean() ** 0.5 / kex
        eks = np.std(k) / kex

    e = [ri, bi, cpr, vf, ekm, ek1, ek2, nx, eks]
    ee.append(e)

fo = "kerr"
with open(fo, 'w') as f:
    f.write("ri bi cpr vf em e1 e2 nx es\n")
    for e in ee:
        f.write(' '.join(map(str, e)) + '\n')

fo = "kerravg"
with open(fo, 'w') as f:
    hh = "ri cpr nx vf vfl vfh vfsl vfsh em eml emh emsl emsh e2 e2l e2h e2sl e2sh"
    hh += " es esl esh essl essh"
    f.write(hh + "\n")
    ee = np.array(ee)
    vri = ee[:,0]
    vbi = ee[:,1]
    vcpr = ee[:,2]
    vvf = ee[:,3]
    vem = ee[:,4]
    ve2 = ee[:,6]
    vnx = ee[:,7]
    ves = ee[:,8]
    vriu,iu = np.unique(vri, return_index=True)
    ww = []
    for i in iu:
        ri = vri[i]
        r, nxexp, cpr = GetR(ri)
        nx = 2 ** nxexp
        assert nx == vnx[i]
        # exact volume
        vfex = np.pi * r ** 2 / nx if dim == 2 else 4. / 3. * np.pi * r ** 3
        # fields copy
        w = [vri[i], vcpr[i], vnx[i]]
        vf = vvf[vri == ri].flatten() / vfex  # relative to exact
        em = vem[vri == ri].flatten()
        lm = np.log(em)
        e2 = ve2[vri == ri].flatten()
        l2 = np.log(e2)
        es = ves[vri == ri].flatten()
        ls = np.log(es)
        # field stat
        w += [vf.mean(), vf.min(), vf.max(), vf.mean() - vf.std(), vf.mean() + vf.std()]
        # field log
        wl = [lm.mean(), lm.min(), lm.max(), lm.mean() - lm.std(), lm.mean() + lm.std()]
        wl += [l2.mean(), l2.min(), l2.max(), l2.mean() - l2.std(), l2.mean() + l2.std()]
        wl += [ls.mean(), ls.min(), ls.max(), ls.mean() - ls.std(), ls.mean() + ls.std()]
        w += list(np.exp(wl))
        assert len(w) == len(hh.split()), "%r != %r" % (len(w), len(hh.split()))
        ww.append(w)

    for w in ww:
        f.write(' '.join(map(str, w)) + '\n')
