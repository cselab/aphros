#!/usr/bin/env python

import numpy as np
import glob
import re

nx = 32.
hx = 1. / nx

rr = [hx * 2. ** re for re in np.linspace(-1., 4., 20)]
bb = np.loadtxt('bb')

ff = sorted(glob.glob("kr*b*.dat"))

ee = []

for f in ff:
    m = re.findall("kr([0-9]*)b([0-9]*)", f)[0]
    ri = int(m[0])
    bi = int(m[1])
    r = rr[ri]
    b = bb[bi]
    # exact curv
    kex = 1. / r
    # particles
    k = np.loadtxt(f)
    # curvature error
    if not k.size:
        ekm = 1.
        ek1 = 1.
        ek2 = 1.
    else:
        ekm = abs(k - kex).max() / kex
        ek1 = abs(k - kex).mean() / kex
        ek2 = ((k - kex) ** 2).mean() ** 0.5 / kex
    cpr = nx * r

    fvf = "vfr{:}b{:}.dat".format(m[0], m[1]) # vf filename
    vf = float(open(fvf).read())

    e = [ri, bi, cpr, vf, ekm, ek1, ek2]
    ee.append(e)

fo = "kerr"
with open(fo, 'w') as f:
    f.write("ri bi cpr vf em e1 e2\n")
    for e in ee:
        f.write(' '.join(map(str, e)) + '\n')

fo = "kerravg"
dim = int(open("dim").read())
with open(fo, 'w') as f:
    hh = "ri cpr vf vfl vfh vfsl vfsh em eml emh emsl emsh e2 e2l e2h e2sl e2sh"
    f.write(hh + "\n")
    ee = np.array(ee)
    vri = ee[:,0]
    vbi = ee[:,1]
    vcpr = ee[:,2]
    vvf = ee[:,3]
    vem = ee[:,4]
    ve2 = ee[:,6]
    vriu,iu = np.unique(vri, return_index=True)
    ww = []
    for i in iu:
        ri = vri[i]
        cpr = vcpr[i]
        nx = 32.
        r = cpr / nx
        # exact volume
        vfex = np.pi * r ** 2 / nx if dim == 2 else 4. / 3. * np.pi * r ** 3
        # fields copy
        w = [ee[i,0], ee[i,2]]
        vf = vvf[vri == ri].flatten() / vfex  # relative to exact
        em = vem[vri == ri].flatten()
        lm = np.log(em)
        e2 = ve2[vri == ri].flatten()
        l2 = np.log(e2)
        # field stat
        w += [vf.mean(), vf.min(), vf.max(), vf.mean() - vf.std(), vf.mean() + vf.std()]
        # field log
        wl = [lm.mean(), lm.min(), lm.max(), lm.mean() - lm.std(), lm.mean() + lm.std()]
        wl += [l2.mean(), l2.min(), l2.max(), l2.mean() - l2.std(), l2.mean() + l2.std()]
        w += list(np.exp(wl))
        assert len(w) == len(hh.split()), "%r != %r" % (len(w), len(hh.split()))
        ww.append(w)

    for w in ww:
        f.write(' '.join(map(str, w)) + '\n')
