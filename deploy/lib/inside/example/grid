#!/bin/sh

me=grid
msg () { echo >&2 "$@" ; }
err () { msg "$me: $@"; exit 2 ; }

usg () {
    cat <<!
$me -i off > vtk
!
exit 2
}

Iflag=0
while test $# -ne 0
do case "$1" in
       -h) usg ;;
       -i) shift
           if test $# -eq 0; then err '-i needs an argument'; fi
           i=$1; shift; Iflag=1 ;;
       *) err "unknown argument '$1'" ;;
   esac
done

if test $Iflag -eq 0; then err '-i is not set'; fi
if ! test -f "$i"
then err "not a file '$i'"
fi

tmp=/tmp/grid.$$
trap 'rm -f $tmp; exit 2' 1 2 3 14 15

awk -v Input="$i" -v tmp=$tmp '
BEGIN {
    lx = ly = lz = 4
    ox = -lx/2
    oy = -ly/2
    oz = -lz/2
    nx = 50
    ny = 50
    nz = 50
    sx = lx/nx
    sy = ly/ny
    sz = lz/nz
    cmd = "./point2 %s > " tmp
    cmd = sprintf(cmd, Input)
    for (k = 0; k < nz; k++)
        for (j = 0; j < ny; j++)
    	    for (i = 0; i < nx; i++) {
		x = ox + sx * i
		y = oy + sy * j
		z = oz + sz * k
		print x, y, z | cmd
        }
    close(cmd)
    i = 0
    while ((getline < tmp) == 1)
        data[i++] = $1
    if (i != nx * ny * nz) {
	printf "grid: assert failed" | "cat >&2"
	exit(2)
    }
	
    print "# vtk DataFile Version 2.0"
    print "generated by aphros"
    print "ASCII"
    print "DATASET STRUCTURED_POINTS"
    printf "DIMENSIONS %d %d %d\n", nx, ny, nz
    printf "ORIGIN %.16g %.16g %.16g\n", ox, oy, oz
    printf "SPACING %.16g %.16g %.16g\n", sx, sy, sz
    printf "POINT_DATA %d\n", nx * ny * nz
    print "SCALARS data int"
    print "LOOKUP_TABLE default"
    for (i = 0; i < nx * ny * nz; i++)
        print data[i]
}
'

rm -f $tmp
