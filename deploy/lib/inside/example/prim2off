#!/usr/bin/awk -f

BEGIN {
    nv = 0
    nf = 0
    me = "prim2off"
    pi = 3.141592653589793

    n_cyl = 20 # resolution for cylinder
}

{
    sub(/#.*/, "")
}

!NF {
    next
}

sub(/[ \t]*cone[ \t]+/, "") {
    if (NF != 10) {
	printf "%s: NF != 9 for cone\n", me | "cat >&2"
	exit(err = 2)
    }
    i = 1
    cx = $(i++)
    cy = $(i++)
    cz = $(i++)
    tx = $(i++)
    ty = $(i++)
    tz = $(i++)
    r0 = $(i++)
    r1 = $(i++)
    t0 = $(i++)
    t1 = $(i++)
    if (tx == 0 && ty == 0 && tz == 0) {
	printf "%s: axis is zero for cone\n", me | "cat >&2"
	exit(err = 2)
    }
    cone(cx, cy, cz, tx, ty, tz, r0, r1, t0, t1)
    next
}

sub(/[ \t]*cylinder[ \t]+/, "") {
    if (NF != 9) {
	printf "%s: NF != 9 for cylinder\n", me | "cat >&2"
	exit(err = 2)
    }
    i = 1
    cx = $(i++)
    cy = $(i++)
    cz = $(i++)
    tx = $(i++)
    ty = $(i++)
    tz = $(i++)
    r = $(i++)
    t0 = $(i++)
    t1 = $(i++)
    if (tx == 0 && ty == 0 && tz == 0) {
	printf "%s: axis is zero for cylinder\n", me | "cat >&2"
	exit(err = 2)
    }
    cone(cx, cy, cz, tx, ty, tz, r, r, t0, t1)
    next
}

sub(/[ \t]*box[ \t]+/, "") {
    if (NF != 6) {
	printf "%s: NF != 6 for box\n", me | "cat >&2"
	exit(err = 2)
    }
    i = 1
    cx = $(i++)
    cy = $(i++)
    cz = $(i++)
    rx = $(i++)
    ry = $(i++)
    rz = $(i++)
    box(cx, cy, cz, rx, ry, rz)
    next
}

{
    printf("%s: unrecognized line '%s'\n", me, $0)
    exit(err = 2)
}

function cone(cx, cy, cz, tx, ty, tz, r0, r1, t0, t1,   Dir, n, i, j, u0, v0, u1, v1) {
    if (tx != 0 && ty == 0 && tz == 0) {
	Dir = "X"
    } else if (tx == 0 && ty != 0 && tz == 0) {
	Dir = "Y"
    } else if (tx == 0 && ty == 0 && tz != 0) {
	Dir = "Z"
    } else {
	printf "%s: only cylinder/cones with axis along of the coordinates axis are implimented\n", me | "cat >&2"
	exit(err = 2)
    }
    n = n_cyl
    for (i = 0; i < n; i++) {
	j = nv + 2*i
	face4(j, j + 1, j + 3, j + 2)
    }
    for (i = 1; i < n; i++) {
	j = nv + 2*i
	face3(nv, j, j + 2)
	face3(nv + 1, j + 1, j + 3)
    }
    for (i = 0; i <= n; i++) {
	u0 = r0 * cos(2*pi/n*i)
	v0 = r0 * sin(2*pi/n*i)
	u1 = r1 * cos(2*pi/n*i)
	v1 = r1 * sin(2*pi/n*i)
	if (Dir == "X") {
	    ver(cx + t0 * tx, cy + u0, cz + v0)
	    ver(cx + t1 * tx, cy + u1, cz + v1)
	} else if (Dir == "Y") {
	    ver(cx + u0, cy + t0 * ty, cz + v0)
	    ver(cx + u1, cy + t1 * ty, cz + v1)
	} else if (Dir == "Z") {
	    ver(cx + u0, cy + v0, cz + t0 * tz)
	    ver(cx + u1, cy + v1, cz + t1 * tz)
	}
    }
}

function ver(x, y, z)
{
    vv[nv] = x " " y " " z
    nv++
}

function face4(a, b, c, d)
{
    ff[nf] = 4 " " a " " b " " c " " d
    nf++
}

function box(cx, cy, cz, rx, ry, rz,   t00, t01, t10, t11, b00, b01, b10, b11)
{
    t00 = nv; t01 = nv + 1; t10 = nv + 2; t11 = nv + 3
    b00 = nv + 4; b01 = nv + 5; b10 = nv + 6; b11 = nv + 7
    face4(t00, t01, t11, t10)
    face4(b00, b01, b11, b10)
    face4(t00, t01, b01, b00)
    face4(t10, t11, b11, b10)
    face4(b01, t01, t11, b11)
    face4(b00, t00, t10, b10)

    ver(cx - rx, cy - ry, cz - rz)
    ver(cx - rx, cy + ry, cz - rz)
    ver(cx + rx, cy - ry, cz - rz)
    ver(cx + rx, cy + ry, cz - rz)
    ver(cx - rx, cy - ry, cz + rz)
    ver(cx - rx, cy + ry, cz + rz)
    ver(cx + rx, cy - ry, cz + rz)
    ver(cx + rx, cy + ry, cz + rz)

}

function face3(a, b, c, d)
{
    ff[nf] = 3 " " a " " b " " c " " d
    nf++
}

END {
    if (err != 0)
	exit(err)
    print "OFF"
    print nv, nf, 0
    for (i = 0; i < nv; i++)
	print vv[i]
    for (i = 0; i < nf; i++)
	print ff[i]
}
